from __future__ import print_function, division, absolute_import

from builtins import super
import logging

from ditto.layers.args import Arg, Kwarg
from ditto.layers.layer import {% if model_type %}ModelType, ModelLayerBase{% else %}LayerBase{% endif %}

logger = logging.getLogger('ditto.layers.{{ class_name }}')


class {{ class_name }}({% if model_type %}ModelLayerBase{% else %}LayerBase{% endif %}):
    name = "{{ name }}"
    desc = {% if desc %}"{{ desc }}"{% else %}None{% endif %}
    {% if model_type %}model_type = {{ model_type }}{% endif %}

    @classmethod
    def args(cls{% if model_type %}, model=None{% endif %}):
        arg_list = super().args()
        arg_list.append(Arg('arg_name', description='', parser=None,
                            choices=None, nargs=None))
        return arg_list

    @classmethod
    def kwargs(cls{% if model_type %}, model=None{% endif %}):
        kwarg_dict = super().kwargs()
        kwarg_dict['kwarg_name'] = Kwarg(default=None, description='',
                                         parser=None, choices=None,
                                         nargs=None, action=None)
        return kwarg_dict

    @classmethod
    def apply(cls, stack, {% if model_type %}model, {% endif %}*args, **kwargs):
        return {% if model_type %}model{% else %}True{% endif %}


if __name__ == '__main__':
{{ main_opts }}
    {{ class_name }}.main()
